{"ast":null,"code":"import GroupNode from './group-node';\nimport traversable from '../mixins/traversable';\nimport { animationFrame, throttle } from '../common';\nconst FRAME_DELAY = 1000 / 60;\nclass RootNode extends traversable(GroupNode, \"childNodes\") {\n  constructor(canvas, size) {\n    super();\n    this.canvas = canvas;\n    this.size = size;\n    this.ctx = canvas.getContext(\"2d\");\n    const invalidateHandler = this._invalidate.bind(this);\n    this.invalidate = throttle(() => {\n      animationFrame(invalidateHandler);\n    }, FRAME_DELAY);\n  }\n  destroy() {\n    super.destroy();\n    this.canvas = null;\n    this.ctx = null;\n  }\n  load(elements, pos, cors) {\n    this.loadElements(elements, pos, cors);\n    this._invalidate();\n  }\n  _rescale(scale) {\n    const {\n      canvas,\n      size\n    } = this;\n    canvas.width = size.width * scale;\n    canvas.height = size.height * scale;\n    this.ctx.scale(scale, scale);\n  }\n  _devicePixelRatio() {\n    if (typeof window.devicePixelRatio === 'number') {\n      return window.devicePixelRatio;\n    }\n    return 1;\n  }\n  _invalidate(options) {\n    if (!this.ctx) {\n      return;\n    }\n    const fixedScale = options && options.fixedScale;\n    const scale = fixedScale ? 1 : this._devicePixelRatio();\n    this._rescale(scale);\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.renderTo(this.ctx);\n  }\n}\nexport default RootNode;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}