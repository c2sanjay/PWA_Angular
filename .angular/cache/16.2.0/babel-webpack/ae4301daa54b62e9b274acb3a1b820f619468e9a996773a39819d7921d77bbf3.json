{"ast":null,"code":"import LRUCache from './lru-cache';\nimport { Class } from '../common';\nimport { objectKey, hashKey, normalizeText } from './util';\nfunction zeroSize() {\n  return {\n    width: 0,\n    height: 0,\n    baseline: 0\n  };\n}\nconst DEFAULT_OPTIONS = {\n  baselineMarkerSize: 1\n};\nlet defaultMeasureBox;\nif (typeof document !== \"undefined\") {\n  defaultMeasureBox = document.createElement(\"div\");\n  defaultMeasureBox.style.setProperty(\"position\", \"absolute\", \"important\");\n  defaultMeasureBox.style.setProperty(\"top\", \"-4000px\", \"important\");\n  defaultMeasureBox.style.setProperty(\"width\", \"auto\", \"important\");\n  defaultMeasureBox.style.setProperty(\"height\", \"auto\", \"important\");\n  defaultMeasureBox.style.setProperty(\"padding\", \"0\", \"important\");\n  defaultMeasureBox.style.setProperty(\"margin\", \"0\", \"important\");\n  defaultMeasureBox.style.setProperty(\"border\", \"0\", \"important\");\n  defaultMeasureBox.style.setProperty(\"line-height\", \"normal\", \"important\");\n  defaultMeasureBox.style.setProperty(\"visibility\", \"hidden\", \"important\");\n  defaultMeasureBox.style.setProperty(\"white-space\", \"pre\", \"important\");\n}\nclass TextMetrics extends Class {\n  constructor(options) {\n    super();\n    this._cache = new LRUCache(1000);\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n  }\n  measure(text, style, options = {}) {\n    if (typeof text === 'undefined' || text === null) {\n      return zeroSize();\n    }\n    const styleKey = objectKey(style);\n    const cacheKey = hashKey(text + styleKey);\n    const cachedResult = this._cache.get(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    const size = zeroSize();\n    const measureBox = options.box || defaultMeasureBox;\n    const baselineMarker = this._baselineMarker().cloneNode(false);\n    for (let key in style) {\n      let value = style[key];\n      if (typeof value !== \"undefined\") {\n        measureBox.style[key] = value;\n      }\n    }\n    const textStr = options.normalizeText !== false ? normalizeText(text) : String(text);\n    measureBox.textContent = textStr;\n    measureBox.appendChild(baselineMarker);\n    document.body.appendChild(measureBox);\n    if (textStr.length) {\n      size.width = measureBox.offsetWidth - this.options.baselineMarkerSize;\n      size.height = measureBox.offsetHeight;\n      size.baseline = baselineMarker.offsetTop + this.options.baselineMarkerSize;\n    }\n    if (size.width > 0 && size.height > 0) {\n      this._cache.put(cacheKey, size);\n    }\n    measureBox.parentNode.removeChild(measureBox);\n    return size;\n  }\n  _baselineMarker() {\n    const marker = document.createElement(\"div\");\n    marker.style.display = \"inline-block\";\n    marker.style.verticalAlign = \"baseline\";\n    marker.style.width = this.options.baselineMarkerSize + \"px\";\n    marker.style.height = this.options.baselineMarkerSize + \"px\";\n    marker.style.overflow = \"hidden\";\n    return marker;\n  }\n}\nTextMetrics.current = new TextMetrics();\nexport default TextMetrics;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}