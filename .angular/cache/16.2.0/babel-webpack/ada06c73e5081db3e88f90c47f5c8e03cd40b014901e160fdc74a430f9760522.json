{"ast":null,"code":"import { defined } from '../util';\nimport Point from '../geometry/point';\nfunction pointAccessor(name) {\n  const fieldName = \"_\" + name;\n  return function (value) {\n    if (defined(value)) {\n      this._observerField(fieldName, Point.create(value));\n      this.geometryChange();\n      return this;\n    }\n    return this[fieldName];\n  };\n}\nfunction definePointAccessors(fn, names) {\n  for (let i = 0; i < names.length; i++) {\n    fn[names[i]] = pointAccessor(names[i]);\n  }\n}\nconst withPoints = (TBase, names) => {\n  const result = class extends TBase {};\n  definePointAccessors(result.prototype, names);\n  return result;\n};\nexport default withPoints;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}