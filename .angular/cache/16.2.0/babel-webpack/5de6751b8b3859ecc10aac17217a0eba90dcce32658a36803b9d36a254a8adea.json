{"ast":null,"code":"import withGeometry from '../mixins/with-geometry';\nimport Element from './element';\nimport Rect from '../geometry/rect';\nimport toMatrix from '../geometry/to-matrix';\nimport { defined } from '../util';\nclass Image extends withGeometry(Element, [\"rect\"]) {\n  get nodeType() {\n    return \"Image\";\n  }\n  constructor(src, rect = new Rect(), options = {}) {\n    super(options);\n    this.src(src);\n    this.rect(rect);\n  }\n  src(value) {\n    if (defined(value)) {\n      this.options.set(\"src\", value);\n      return this;\n    }\n    return this.options.get(\"src\");\n  }\n  bbox(transformation) {\n    const combinedMatrix = toMatrix(this.currentTransform(transformation));\n    return this._rect.bbox(combinedMatrix);\n  }\n  rawBBox() {\n    return this._rect.bbox();\n  }\n  _containsPoint(point) {\n    return this._rect.containsPoint(point);\n  }\n  _hasFill() {\n    return this.src();\n  }\n}\nexport default Image;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}