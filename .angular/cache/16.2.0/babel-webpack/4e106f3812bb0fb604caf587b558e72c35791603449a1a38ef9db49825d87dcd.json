{"ast":null,"code":"import { Size, Rect as geomRect, Circle as geomCircle } from '../geometry';\nimport { Rect as drawRect, Circle as drawCircle, Path } from '../drawing';\nimport Group from '../shapes/group';\nimport { definitionId } from '../util';\nimport { PATTERN } from '../core/constants';\nconst defaultColor = \"#aba4a6\";\nconst defaultLine = {\n  width: 2,\n  gap: 18\n};\nconst defaultDot = {\n  radius: 10,\n  gap: 10\n};\nconst defaultGrid = {\n  size: 18,\n  gap: 2\n};\nexport class Pattern extends Group {\n  get nodeType() {\n    return PATTERN;\n  }\n  constructor(options) {\n    super();\n    const {\n      width,\n      height\n    } = options;\n    this._size = Size.create([width, height]);\n    this.id = definitionId();\n  }\n  size(value) {\n    if (value) {\n      this._size = Size.create(value);\n      return this;\n    }\n    return this._size;\n  }\n}\nconst drawBackground = (pattern, color, size) => {\n  if (color) {\n    pattern.append(new drawRect(new geomRect([0, 0], size), {\n      fill: {\n        color\n      },\n      stroke: null\n    }));\n  }\n};\nexport function dotsPattern(options = {}) {\n  const {\n    gap = defaultDot.gap,\n    radius = defaultDot.radius,\n    color = defaultColor,\n    background\n  } = options;\n  const shapeOptions = {\n    fill: {\n      color\n    },\n    stroke: null\n  };\n  const size = 4 * radius + 2 * gap;\n  const yC2 = 3 * radius + 1.5 * gap;\n  const center1 = [size / 2, radius + 1 / 2 * gap];\n  const center2 = [0, yC2];\n  const center3 = [size, yC2];\n  const pattern = new Pattern({\n    width: size,\n    height: size\n  });\n  drawBackground(pattern, background, [size, size]);\n  pattern.append(new drawCircle(new geomCircle(center1, radius), shapeOptions), new drawCircle(new geomCircle(center2, radius), shapeOptions), new drawCircle(new geomCircle(center3, radius), shapeOptions));\n  return pattern;\n}\n;\nexport function verticalStripesPattern(options = {}) {\n  const {\n    gap = defaultLine.gap,\n    width = defaultLine.width,\n    color = defaultColor,\n    background\n  } = options;\n  const size = width + gap;\n  const shapeOptions = {\n    fill: null,\n    stroke: {\n      color,\n      width: width / 2\n    }\n  };\n  const pattern = new Pattern({\n    width: size,\n    height: size\n  });\n  drawBackground(pattern, background, [size, size]);\n  const xStart = width / 4;\n  const xEnd = size - width / 4;\n  const startLine = new Path(shapeOptions);\n  startLine.moveTo(xStart, 0).lineTo(xStart, size);\n  const endLine = new Path(shapeOptions);\n  endLine.moveTo(xEnd, 0).lineTo(xEnd, size);\n  pattern.append(startLine, endLine);\n  return pattern;\n}\n;\nexport function crosshatchPattern(options = {}) {\n  const {\n    gap = defaultLine.gap,\n    width = defaultLine.width,\n    color = defaultColor,\n    background\n  } = options;\n  const size = Math.sqrt(2) * (width + gap);\n  const shapeOptions = {\n    fill: null,\n    stroke: {\n      color,\n      width\n    }\n  };\n  const pattern = new Pattern({\n    width: size,\n    height: size\n  });\n  drawBackground(pattern, background, [size, size]);\n  const line1 = new Path(shapeOptions);\n  line1.moveTo(0, 0).lineTo(size, size);\n  const line2 = new Path(shapeOptions);\n  line2.moveTo(size, 0).lineTo(0, size);\n  pattern.append(line1, line2);\n  return pattern;\n}\n;\nexport function diagonalStripesPattern(options = {}) {\n  const {\n    gap = defaultLine.gap,\n    width = defaultLine.width,\n    color = defaultColor,\n    background\n  } = options;\n  const size = Math.sqrt(2) * (width + gap);\n  const shapeOptions = {\n    fill: null,\n    stroke: {\n      color,\n      width,\n      lineCap: 'square'\n    }\n  };\n  const pattern = new Pattern({\n    width: size,\n    height: size\n  });\n  drawBackground(pattern, background, [size, size]);\n  const line1 = new Path(shapeOptions);\n  line1.moveTo(0, size / 2).lineTo(size / 2, 0);\n  const line2 = new Path(shapeOptions);\n  line2.moveTo(size / 2, size).lineTo(size, size / 2);\n  pattern.append(line1, line2);\n  return pattern;\n}\n;\nexport function gridPattern(options = {}) {\n  const {\n    gap = defaultGrid.gap,\n    size: squareSize = defaultGrid.size,\n    color = defaultColor,\n    background\n  } = options;\n  const size = squareSize + gap;\n  const halfGap = gap / 2;\n  const shapeOptions = {\n    fill: {\n      color\n    },\n    stroke: null\n  };\n  const pattern = new Pattern({\n    width: size,\n    height: size\n  });\n  drawBackground(pattern, background, [size, size]);\n  const rect = new drawRect(new geomRect([halfGap, halfGap], [squareSize, squareSize]), shapeOptions);\n  pattern.append(rect);\n  return pattern;\n}\n;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}