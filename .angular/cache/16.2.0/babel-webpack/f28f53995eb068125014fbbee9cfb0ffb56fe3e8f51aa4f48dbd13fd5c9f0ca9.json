{"ast":null,"code":"/* eslint-disable */\nimport { greedy, sequence } from './parsing/combinators';\nimport { literal, mask as maskParser, rawLiteral, rawMask, token, unliteral, unmask } from './parsing/parsers';\n/**\n * @hidden\n */\nexport class MaskingService {\n  constructor() {\n    this.rules = {};\n    this.prompt = '_';\n    this.mask = '';\n    this.promptPlaceholder = ' ';\n    this.includeLiterals = false;\n    this.maskTokens = [];\n    this.unmaskTokens = [];\n    this.rawTokens = [];\n    this.validationTokens = [];\n  }\n  update({\n    mask = '',\n    prompt = '',\n    promptPlaceholder = ' ',\n    rules = {},\n    includeLiterals = false\n  }) {\n    this.mask = mask;\n    this.prompt = prompt;\n    this.promptPlaceholder = promptPlaceholder;\n    this.rules = rules;\n    this.includeLiterals = includeLiterals;\n    this.tokenize();\n  }\n  validationValue(maskedValue = '') {\n    let value = maskedValue;\n    sequence(this.validationTokens).run(maskedValue).fold(unmasked => {\n      value = unmasked.join('');\n    });\n    return value;\n  }\n  rawValue(maskedValue = '') {\n    let value = maskedValue;\n    if (!this.rawTokens.length) {\n      return value;\n    }\n    sequence(this.rawTokens).run(maskedValue).fold(unmasked => {\n      value = unmasked.join('');\n    });\n    return value;\n  }\n  /**\n   * @hidden\n   */\n  maskRaw(rawValue = '') {\n    let value = rawValue;\n    if (!this.maskTokens.length) {\n      return value;\n    }\n    sequence(this.maskTokens).run(rawValue).fold(masked => {\n      value = masked.join('');\n    });\n    return value;\n  }\n  maskInput(input, control, splitPoint) {\n    if (input.length < control.length) {\n      return this.maskRemoved(input, control, splitPoint);\n    }\n    return this.maskInserted(input, control, splitPoint);\n  }\n  maskInRange(pasted, oldValue, start, end) {\n    let value = '';\n    let selection = end;\n    const beforeChange = oldValue.split('').slice(0, start);\n    const afterChange = oldValue.split('').slice(end);\n    sequence(this.maskTokens.slice(start, end)).run(pasted).fold(masked => {\n      value = beforeChange.concat(masked).concat(afterChange).join('');\n    });\n    return {\n      selection,\n      value\n    };\n  }\n  maskRemoved(input, control, splitPoint) {\n    let value = '';\n    let selection = splitPoint;\n    const unchanged = input.split('').slice(splitPoint);\n    const changed = input.split('').slice(0, splitPoint).join('');\n    const take = this.maskTokens.length - (input.length - splitPoint);\n    sequence(this.maskTokens.slice(0, take)).run(changed, control).fold(masked => {\n      selection = this.adjustPosition(masked, selection);\n      value = masked.concat(unchanged).join('');\n    });\n    return {\n      selection,\n      value\n    };\n  }\n  adjustPosition(input, selection) {\n    const caretChar = input[selection];\n    const isLiteral = this.maskTokens[selection].isLiteral(caretChar);\n    if (!isLiteral && caretChar !== this.prompt) {\n      return selection + 1;\n    }\n    return selection;\n  }\n  maskInserted(input, control, splitPoint) {\n    let value = '';\n    let selection = splitPoint;\n    const changed = input.slice(0, splitPoint);\n    sequence(this.unmaskTokens).run(changed, control).chain(unmasked => {\n      selection = unmasked.join('').length;\n      const unchanged = control.slice(selection);\n      return sequence(this.maskTokens).run(unmasked.join('') + unchanged, control);\n    }).fold(masked => {\n      value = masked.join('');\n    });\n    return {\n      selection,\n      value\n    };\n  }\n  get maskTokenCreator() {\n    const {\n      prompt,\n      promptPlaceholder\n    } = this;\n    return {\n      literal: rule => literal(rule),\n      mask: rule => maskParser({\n        prompt,\n        promptPlaceholder\n      })(rule)\n    };\n  }\n  get unmaskTokenCreator() {\n    return {\n      literal: rule => unliteral(rule),\n      mask: rule => unmask(this.prompt)(rule)\n    };\n  }\n  get rawTokenCreator() {\n    const {\n      prompt,\n      promptPlaceholder,\n      includeLiterals\n    } = this;\n    return {\n      literal: _ => rawLiteral(includeLiterals),\n      mask: _ => rawMask({\n        prompt,\n        promptPlaceholder\n      })\n    };\n  }\n  get validationTokenCreator() {\n    const {\n      prompt\n    } = this;\n    return {\n      literal: _ => rawLiteral(false),\n      mask: _ => rawMask({\n        prompt,\n        promptPlaceholder: ''\n      })\n    };\n  }\n  tokenize() {\n    greedy(token(this.rules, this.maskTokenCreator)).run(this.mask).fold((tokens, _) => {\n      this.maskTokens = tokens;\n    });\n    greedy(token(this.rules, this.unmaskTokenCreator)).run(this.mask).fold((tokens, _) => {\n      this.unmaskTokens = tokens;\n    });\n    greedy(token(this.rules, this.rawTokenCreator)).run(this.mask).fold((tokens, _) => {\n      this.rawTokens = tokens;\n    });\n    greedy(token(this.rules, this.validationTokenCreator)).run(this.mask).fold((tokens, _) => {\n      this.validationTokens = tokens;\n    });\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}