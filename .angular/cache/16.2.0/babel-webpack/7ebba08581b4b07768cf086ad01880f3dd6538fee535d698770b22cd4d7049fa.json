{"ast":null,"code":"import _defineProperty from \"C:/Users/Mobile programming/Documents/angular-pwa-boilerplate/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**-----------------------------------------------------------------------------------------\n* Copyright © 2025 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Directive, Optional, Component, Input, ContentChild, NgModule } from '@angular/core';\nimport { drawDOM, exportPDF } from '@progress/kendo-drawing';\nimport { saveAs } from '@progress/kendo-file-saver';\nimport { validatePackage } from '@progress/kendo-licensing';\n\n/**\n * @hidden\n */\nconst _c0 = [\"*\"];\nconst packageMetadata = {\n  name: '@progress/kendo-angular-pdf-export',\n  productName: 'Kendo UI for Angular',\n  productCode: 'KENDOUIANGULAR',\n  productCodes: ['KENDOUIANGULAR'],\n  publishDate: 1741163703,\n  version: '18.1.1',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/'\n};\nlet PDFExportTemplateDirective = /*#__PURE__*/(() => {\n  var _class;\n  class PDFExportTemplateDirective {\n    constructor(templateRef) {\n      _defineProperty(this, \"templateRef\", void 0);\n      this.templateRef = templateRef;\n    }\n  }\n  _class = PDFExportTemplateDirective;\n  _defineProperty(PDFExportTemplateDirective, \"\\u0275fac\", function _class_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i0.TemplateRef, 8));\n  });\n  _defineProperty(PDFExportTemplateDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _class,\n    selectors: [[\"\", \"kendoPDFTemplate\", \"\"]],\n    standalone: true\n  }));\n  return PDFExportTemplateDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst FIELDS = ['bottom', 'left', 'right', 'top'];\n/**\n * Represents the Kendo UI PDFMargin component for Angular.\n */\nlet PDFExportMarginComponent = /*#__PURE__*/(() => {\n  var _class2;\n  class PDFExportMarginComponent {\n    constructor() {\n      /**\n       * The bottom margin. The supported units are `\"mm\"`, `\"cm\"`, `\"in\"`, and `\"pt\"` (default).\n       * Numbers are considered to be points (`\"pt\"`).\n       */\n      _defineProperty(this, \"left\", void 0);\n      /**\n       * The top margin. The supported units are `\"mm\"`, `\"cm\"`, `\"in\"`, and `\"pt\"` (default).\n       * Numbers are considered to be points (`\"pt\"`).\n       */\n      _defineProperty(this, \"top\", void 0);\n      /**\n       * The right margin. The supported units are `\"mm\"`, `\"cm\"`, `\"in\"`, and `\"pt\"` (default).\n       * Numbers are considered to be points (`\"pt\"`).\n       */\n      _defineProperty(this, \"right\", void 0);\n      /**\n       * The bottom margin. The supported units are `\"mm\"`, `\"cm\"`, `\"in\"`, and `\"pt\"` (default).\n       * Numbers are considered to be points (`\"pt\"`).\n       */\n      _defineProperty(this, \"bottom\", void 0);\n    }\n    /**\n     * @hidden\n     */\n    get options() {\n      const options = {};\n      for (let idx = 0; idx < FIELDS.length; idx++) {\n        const field = FIELDS[idx];\n        const value = this[field];\n        if (typeof value !== 'undefined') {\n          options[field] = value;\n        }\n      }\n      return options;\n    }\n  }\n  _class2 = PDFExportMarginComponent;\n  _defineProperty(PDFExportMarginComponent, \"\\u0275fac\", function _class2_Factory(t) {\n    return new (t || _class2)();\n  });\n  _defineProperty(PDFExportMarginComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class2,\n    selectors: [[\"kendo-pdf-export-margin\"]],\n    inputs: {\n      left: \"left\",\n      top: \"top\",\n      right: \"right\",\n      bottom: \"bottom\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 0,\n    vars: 0,\n    template: function _class2_Template(rf, ctx) {},\n    encapsulation: 2\n  }));\n  return PDFExportMarginComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @hidden\n */\nconst compileTemplate = templateRef => {\n  const context = {};\n  let embeddedView = templateRef.createEmbeddedView(context);\n  const result = data => {\n    Object.assign(context, data);\n    embeddedView.detectChanges();\n    const templateWrap = document.createElement('span');\n    embeddedView.rootNodes.forEach(rootNode => {\n      templateWrap.appendChild(rootNode.cloneNode(true));\n    });\n    return templateWrap;\n  };\n  result.destroy = () => {\n    embeddedView.destroy();\n    embeddedView = null;\n  };\n  return result;\n};\n\n/**\n * Represents the [Kendo UI PDF Export component for Angular]({% slug overview_pdfexport %}).\n *\n * @example\n * ```ts-preview\n * _@Component({\n *   selector: 'my-app',\n *   template: `\n *     <div class=\"example-config\">\n *       <button kendoButton (click)=\"pdf.saveAs('document.pdf')\">\n *         Save As PDF...\n *       </button>\n *     </div>\n *\n *     <kendo-pdf-export #pdf paperSize=\"A4\" margin=\"2cm\">\n *       Content goes here\n *     </kendo-pdf-export>\n *   `\n * })\n * export class AppComponent {\n * }\n * ```\n */\nlet PDFExportComponent = /*#__PURE__*/(() => {\n  var _class3;\n  class PDFExportComponent {\n    get drawMargin() {\n      const marginComponent = this.marginComponent;\n      let margin = this.margin;\n      if (marginComponent) {\n        margin = Object.assign(margin || {}, marginComponent.options);\n      }\n      return margin;\n    }\n    constructor(element) {\n      _defineProperty(this, \"element\", void 0);\n      /**\n       * Specifies if the Print dialog should be opened immediately after loading the document ([see example](slug:autoprint_pdfexport)).\n       * Requires `@progress/kendo-drawing` v1.9.0 or later.\n       * @default false\n       */\n      _defineProperty(this, \"autoPrint\", void 0);\n      /**\n       * The author (metadata) of the PDF document.\n       */\n      _defineProperty(this, \"author\", void 0);\n      /**\n       * A flag that indicates whether to produce actual hyperlinks in the exported PDF file ([see example](slug:hyperlinks_pdfexport)).\n       * It is also possible to set a CSS selector. All matching links will be ignored.\n       */\n      _defineProperty(this, \"avoidLinks\", void 0);\n      /**\n       * An optional CSS selector that specifies the elements which cause the page breaks\n       * ([see example]({% slug multipagecontent_pdfexport %}#toc-manual-page-breaking)).\n       */\n      _defineProperty(this, \"forcePageBreak\", void 0);\n      /**\n       * An optional CSS selector that specifies the elements which should not be split across the pages\n       * ([see example]({% slug multipagecontent_pdfexport %}#toc-preventing-page-breaking-in-elements)).\n       */\n      _defineProperty(this, \"keepTogether\", void 0);\n      /**\n       * The creator of the PDF document.\n       * @default \"Kendo UI PDF Generator\"\n       */\n      _defineProperty(this, \"creator\", 'Kendo UI PDF Generator');\n      /**\n       * The date when the PDF document is created. Defaults to `new Date()`.\n       */\n      _defineProperty(this, \"date\", void 0);\n      /**\n       * The forced resolution of the images in the exported PDF document\n       * ([see example]({% slug embeddedimages_pdfexport %})).\n       * By default, the images are exported at their full resolution.\n       */\n      _defineProperty(this, \"imageResolution\", void 0);\n      /**\n       * Specifies the name of the exported PDF file.\n       * @default \"export.pdf\"\n       */\n      _defineProperty(this, \"fileName\", 'export.pdf');\n      /**\n       * If set to `true`, the content is forwarded to `proxyURL` even if the\n       * browser supports local saving of files.\n       */\n      _defineProperty(this, \"forceProxy\", void 0);\n      /**\n       * The keywords (metadata) of the PDF document.\n       */\n      _defineProperty(this, \"keywords\", void 0);\n      /**\n       * A flag that indicates if the page will be in a landscape orientation.\n       * By default, the page is in a portrait orientation.\n       *\n       * @default false\n       */\n      _defineProperty(this, \"landscape\", void 0);\n      /**\n       * Specifies the margins of the page. Numbers are treated as points (`\"pt\"`).\n       *\n       */\n      _defineProperty(this, \"margin\", void 0);\n      /**\n       * Specifies the paper size of the PDF document ([see example]({% slug multipagecontent_pdfexport %}#toc-automatic-page-breaking)).\n       * Defaults to `\"auto\"` which means that the paper size is determined by the content.\n       * The size of the content in pixels matches the size of the output in points (1 pixel = 1/72 inch).\n       * If `paperSize` is set, the content is split across multiple pages. This enables the `repeatHeaders` and\n       * `scale` options, and allows you to specify a template.\n       *\n       * The paper size can be a `PaperSize`, an array of two numbers which specify the width and height in points (1 pt = 1/72 in), or an\n       * array of two strings which specify the width and height in units. The supported units are `\"mm\"`, `\"cm\"`, `\"in\"`, and `\"pt\"`.\n       * @default 'auto'\n       */\n      _defineProperty(this, \"paperSize\", void 0);\n      /**\n       * Specifies if the `<thead>` elements of the tables will be repeated on each page\n       * ([see example]({% slug recurrenttableheaders_pdfexport %})).\n       */\n      _defineProperty(this, \"repeatHeaders\", void 0);\n      /**\n       * A scale factor ([see example]({% slug scalingofcontent_pdfexport %})).\n       * The text size on the screen might be too big for printing.\n       * To scale down the output in PDF, use this option.\n       *\n       * @default 1\n       */\n      _defineProperty(this, \"scale\", void 0);\n      /**\n       * A key/value dictionary of form values which will be sent to the proxy.\n       * Can be used to submit Anti-Forgery tokens and other metadata.\n       */\n      _defineProperty(this, \"proxyData\", void 0);\n      /**\n       * The URL of the server-side proxy which streams the file to the end user. You need to use a proxy if\n       * the browser is not capable of saving files locally.\n       * It is your responsibility to implement the server-side proxy. The proxy returns the decoded file with\n       * the `\"Content-Disposition\"` header set to `attachment; filename=\"<fileName.pdf>\"`.\n       *\n       * In the request body, the proxy receives a POST request with the specific parameters.\n       * [See example](slug:server_proxy#toc-implementations).\n       */\n      _defineProperty(this, \"proxyURL\", void 0);\n      /**\n       * A name or keyword which indicates where to display the document that is returned from the proxy.\n       * To display the document in a new window or iframe,\n       * the proxy has to have the `\"Content-Disposition\"` header set to `inline; filename=\"<fileName.pdf>\"`.\n       * @default \"_self\"\n       */\n      _defineProperty(this, \"proxyTarget\", void 0);\n      /**\n       * The producer (metadata) of the PDF document.\n       */\n      _defineProperty(this, \"producer\", void 0);\n      /**\n       * The subject (metadata) of the PDF document.\n       */\n      _defineProperty(this, \"subject\", void 0);\n      /**\n       * The title (metadata) of the PDF document.\n       */\n      _defineProperty(this, \"title\", void 0);\n      /**\n       * @hidden\n       */\n      _defineProperty(this, \"pageTemplateDirective\", void 0);\n      /**\n       * @hidden\n       */\n      _defineProperty(this, \"marginComponent\", void 0);\n      _defineProperty(this, \"pageTemplate\", void 0);\n      this.element = element;\n      validatePackage(packageMetadata);\n    }\n    /**\n     * Saves the content as a PDF file with the specified name.\n     * @param fileName - The name of the exported file.\n     */\n    saveAs(fileName = this.fileName) {\n      this.save(this.element.nativeElement, fileName);\n    }\n    /**\n     * Exports the content as a `Group` for further processing.\n     *\n     * @return The root group of the exported scene.\n     */\n    export() {\n      return this.exportElement(this.element.nativeElement);\n    }\n    save(element, fileName) {\n      this.exportElement(element).then(group => this.exportGroup(group, this.pdfOptions())).then(dataUri => this.saveDataUri(dataUri, fileName, this.saveOptions()));\n    }\n    exportElement(element) {\n      const promise = this.drawElement(element, this.drawOptions());\n      const cleanup = this.cleanup.bind(this);\n      promise.then(cleanup, cleanup);\n      return promise;\n    }\n    cleanup() {\n      if (this.pageTemplate) {\n        this.pageTemplate.destroy();\n        delete this.pageTemplate;\n      }\n    }\n    drawOptions() {\n      if (this.pageTemplateDirective) {\n        this.pageTemplate = compileTemplate(this.pageTemplateDirective.templateRef);\n      }\n      return {\n        avoidLinks: this.avoidLinks,\n        forcePageBreak: this.forcePageBreak,\n        keepTogether: this.keepTogether,\n        margin: this.drawMargin,\n        paperSize: this.paperSize,\n        landscape: this.landscape,\n        repeatHeaders: this.repeatHeaders,\n        scale: this.scale,\n        template: this.pageTemplate\n      };\n    }\n    pdfOptions() {\n      return {\n        autoPrint: this.autoPrint,\n        author: this.author,\n        creator: this.creator,\n        date: this.date,\n        imgDPI: this.imageResolution,\n        keywords: this.keywords,\n        landscape: this.landscape,\n        margin: this.drawMargin,\n        multiPage: true,\n        paperSize: this.paperSize,\n        producer: this.producer,\n        subject: this.subject,\n        title: this.title\n      };\n    }\n    saveOptions() {\n      return {\n        forceProxy: this.forceProxy,\n        proxyData: this.proxyData,\n        proxyTarget: this.proxyTarget,\n        proxyURL: this.proxyURL\n      };\n    }\n    drawElement(element, options) {\n      return drawDOM(element, options);\n    }\n    exportGroup(group, options) {\n      return exportPDF(group, options);\n    }\n    saveDataUri(dataUri, fileName, options) {\n      saveAs(dataUri, fileName, options);\n    }\n  }\n  _class3 = PDFExportComponent;\n  _defineProperty(PDFExportComponent, \"\\u0275fac\", function _class3_Factory(t) {\n    return new (t || _class3)(i0.ɵɵdirectiveInject(i0.ElementRef));\n  });\n  _defineProperty(PDFExportComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class3,\n    selectors: [[\"kendo-pdf-export\"]],\n    contentQueries: function _class3_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        i0.ɵɵcontentQuery(dirIndex, PDFExportTemplateDirective, 5);\n        i0.ɵɵcontentQuery(dirIndex, PDFExportMarginComponent, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.pageTemplateDirective = _t.first);\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.marginComponent = _t.first);\n      }\n    },\n    inputs: {\n      autoPrint: \"autoPrint\",\n      author: \"author\",\n      avoidLinks: \"avoidLinks\",\n      forcePageBreak: \"forcePageBreak\",\n      keepTogether: \"keepTogether\",\n      creator: \"creator\",\n      date: \"date\",\n      imageResolution: \"imageResolution\",\n      fileName: \"fileName\",\n      forceProxy: \"forceProxy\",\n      keywords: \"keywords\",\n      landscape: \"landscape\",\n      margin: \"margin\",\n      paperSize: \"paperSize\",\n      repeatHeaders: \"repeatHeaders\",\n      scale: \"scale\",\n      proxyData: \"proxyData\",\n      proxyURL: \"proxyURL\",\n      proxyTarget: \"proxyTarget\",\n      producer: \"producer\",\n      subject: \"subject\",\n      title: \"title\"\n    },\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    template: function _class3_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵprojection(1);\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  }));\n  return PDFExportComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Utility array that contains all `PDFExport` related components and directives\n */\nconst KENDO_PDFEXPORT = [PDFExportComponent, PDFExportMarginComponent, PDFExportTemplateDirective];\n\n// IMPORTANT: NgModule export kept for backwards compatibility\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi']) definition for the PDF Export directive.\n */\nlet PDFExportModule = /*#__PURE__*/(() => {\n  var _class4;\n  class PDFExportModule {}\n  _class4 = PDFExportModule;\n  _defineProperty(PDFExportModule, \"\\u0275fac\", function _class4_Factory(t) {\n    return new (t || _class4)();\n  });\n  _defineProperty(PDFExportModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _class4\n  }));\n  _defineProperty(PDFExportModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n  return PDFExportModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KENDO_PDFEXPORT, PDFExportComponent, PDFExportMarginComponent, PDFExportModule, PDFExportTemplateDirective, compileTemplate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}