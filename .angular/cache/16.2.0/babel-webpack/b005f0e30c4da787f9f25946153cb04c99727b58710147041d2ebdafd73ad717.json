{"ast":null,"code":"import Node from './node';\nimport { defined, isTransparent } from '../util';\nimport { DASH_ARRAYS, SOLID, BUTT, PATTERN } from '../core/constants';\nimport { NONE, POINT_DIGITS } from './constants';\nimport renderAllAttr from './utils/render-all-attributes';\nimport renderAttr from './utils/render-attribute';\nconst ATTRIBUTE_MAP = {\n  \"fill.opacity\": \"fill-opacity\",\n  \"stroke.color\": \"stroke\",\n  \"stroke.width\": \"stroke-width\",\n  \"stroke.opacity\": \"stroke-opacity\"\n};\nclass PathNode extends Node {\n  geometryChange() {\n    this.attr(\"d\", this.renderData());\n    this.invalidate();\n  }\n  optionsChange(e) {\n    switch (e.field) {\n      case \"fill\":\n        if (e.value) {\n          this.allAttr(this.mapFill(e.value));\n        } else {\n          this.removeAttr(\"fill\");\n        }\n        break;\n      case \"fill.color\":\n        this.allAttr(this.mapFill({\n          color: e.value\n        }));\n        break;\n      case \"stroke\":\n        if (e.value) {\n          this.allAttr(this.mapStroke(e.value));\n        } else {\n          this.removeAttr(\"stroke\");\n        }\n        break;\n      case \"transform\":\n        this.transformChange(e.value);\n        break;\n      default:\n        const name = ATTRIBUTE_MAP[e.field];\n        if (name) {\n          this.attr(name, e.value);\n        }\n        break;\n    }\n    this.accessibilityOptionsChange(e);\n    super.optionsChange(e);\n  }\n  content() {\n    if (this.element) {\n      this.element.textContent = this.srcElement.content();\n    }\n  }\n  renderData() {\n    return this.srcElement.toString(POINT_DIGITS) || undefined;\n  }\n  mapStroke(stroke) {\n    const attrs = [];\n    if (stroke && !isTransparent(stroke.color)) {\n      attrs.push([\"stroke\", stroke.color]);\n      attrs.push([\"stroke-width\", stroke.width]);\n      attrs.push([\"stroke-linecap\", this.renderLinecap(stroke)]);\n      attrs.push([\"stroke-linejoin\", stroke.lineJoin]);\n      if (defined(stroke.opacity)) {\n        attrs.push([\"stroke-opacity\", stroke.opacity]);\n      }\n      if (defined(stroke.dashType)) {\n        attrs.push([\"stroke-dasharray\", this.renderDashType(stroke)]);\n      }\n    } else {\n      attrs.push([\"stroke\", NONE]);\n    }\n    return attrs;\n  }\n  renderStroke() {\n    return renderAllAttr(this.mapStroke(this.srcElement.options.stroke));\n  }\n  renderDashType(stroke) {\n    const {\n      dashType,\n      width = 1\n    } = stroke;\n    if (dashType && dashType !== SOLID) {\n      const dashArray = DASH_ARRAYS[dashType.toLowerCase()];\n      const result = [];\n      for (let i = 0; i < dashArray.length; i++) {\n        result.push(dashArray[i] * width);\n      }\n      return result.join(\" \");\n    }\n  }\n  renderLinecap(stroke) {\n    const {\n      dashType,\n      lineCap\n    } = stroke;\n    return dashType && dashType !== SOLID ? BUTT : lineCap;\n  }\n  mapFill(fill) {\n    const attrs = [];\n    if (!(fill && (fill.nodeType === \"Gradient\" || fill.nodeType === PATTERN))) {\n      if (fill && !isTransparent(fill.color)) {\n        attrs.push([\"fill\", fill.color]);\n        if (defined(fill.opacity)) {\n          attrs.push([\"fill-opacity\", fill.opacity]);\n        }\n      } else {\n        attrs.push([\"fill\", NONE]);\n      }\n    }\n    return attrs;\n  }\n  renderFill() {\n    return renderAllAttr(this.mapFill(this.srcElement.options.fill));\n  }\n  template() {\n    return `<path ${this.renderId()} ${this.renderStyle()} ${this.renderOpacity()} ${renderAttr('d', this.renderData())}` + `${this.renderStroke()}${this.renderFill()}${this.renderDefinitions()}${this.renderTransform()}` + `${this.renderClassName()} ${this.renderRole()}` + `${this.renderAriaLabel()} ${this.renderAriaRoleDescription()}` + `${this.renderAriaChecked()} ></path>`;\n  }\n}\nexport default PathNode;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}