{"ast":null,"code":"import HasObservers from '../core/has-observers';\nconst push = [].push;\nconst pop = [].pop;\nconst splice = [].splice;\nconst shift = [].shift;\nconst slice = [].slice;\nconst unshift = [].unshift;\nclass ElementsArray extends HasObservers {\n  constructor(array = []) {\n    super();\n    this.length = 0;\n    this._splice(0, array.length, array);\n  }\n  elements(value) {\n    if (value) {\n      this._splice(0, this.length, value);\n      this._change();\n      return this;\n    }\n    return this.slice(0);\n  }\n  push() {\n    const elements = arguments;\n    const result = push.apply(this, elements);\n    this._add(elements);\n    return result;\n  }\n  slice() {\n    return slice.call(this);\n  }\n  pop() {\n    const length = this.length;\n    const result = pop.apply(this);\n    if (length) {\n      this._remove([result]);\n    }\n    return result;\n  }\n  splice(index, howMany) {\n    const elements = slice.call(arguments, 2);\n    const result = this._splice(index, howMany, elements);\n    this._change();\n    return result;\n  }\n  shift() {\n    const length = this.length;\n    const result = shift.apply(this);\n    if (length) {\n      this._remove([result]);\n    }\n    return result;\n  }\n  unshift() {\n    const elements = arguments;\n    const result = unshift.apply(this, elements);\n    this._add(elements);\n    return result;\n  }\n  indexOf(element) {\n    const length = this.length;\n    for (let idx = 0; idx < length; idx++) {\n      if (this[idx] === element) {\n        return idx;\n      }\n    }\n    return -1;\n  }\n  _splice(index, howMany, elements) {\n    const result = splice.apply(this, [index, howMany].concat(elements));\n    this._clearObserver(result);\n    this._setObserver(elements);\n    return result;\n  }\n  _add(elements) {\n    this._setObserver(elements);\n    this._change();\n  }\n  _remove(elements) {\n    this._clearObserver(elements);\n    this._change();\n  }\n  _setObserver(elements) {\n    for (let idx = 0; idx < elements.length; idx++) {\n      elements[idx].addObserver(this);\n    }\n  }\n  _clearObserver(elements) {\n    for (let idx = 0; idx < elements.length; idx++) {\n      elements[idx].removeObserver(this);\n    }\n  }\n  _change() {}\n}\nexport default ElementsArray;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}