{"ast":null,"code":"import { zoneAndRule } from './zone-and-rule';\nimport { padNumber } from './pad-number';\n// tslint:disable:max-line-length\n/**\n * A function which returns the abbreviated name of the timezone. You can specify an optional date for returning the timezone name at a different point in time. The corresponding UTC date is used for locating the relevant rule. Timezone names change both historically and when they reflect the Daylight Savings Time rules.\n *\n * @param timezone - The timezone name. For example, `America/Chicago`, `Europe/Sofia`.\n * @param date - A date for which to locate the zone rule. By default, the current time is used.\n *\n * @return - The abbreviated name of the timezone at the specified date or, if not set, returns now.\n *\n * @example\n * ```ts-no-run\n * import { abbrTimezone } from '@progress/kendo-date-math';\n * import '@progress/kendo-date-math/tz/Europe/Sofia';\n *\n * const dstDate = new Date('2018-04-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', dstDate)); // EEST\n *\n * const date = new Date('2018-01-01T00:00:00Z');\n * console.log(abbrTimezone('Europe/Sofia', date)); // EET\n * ```\n */\n// tslint:enable:max-line-length\nexport const abbrTimezone = (timezone, date = new Date()) => {\n  if (timezone === \"Etc/UTC\") {\n    return 'UTC';\n  }\n  if (timezone === \"Etc/GMT\") {\n    return 'GMT';\n  }\n  if (timezone === '') {\n    return '';\n  }\n  const {\n    zone,\n    rule\n  } = zoneAndRule(timezone, date);\n  const base = zone[2];\n  if (base.indexOf(\"/\") >= 0) {\n    return base.split(\"/\")[rule && +rule[6] ? 1 : 0];\n  } else if (base.indexOf(\"%s\") >= 0) {\n    return base.replace(\"%s\", !rule || rule[7] === \"-\" ? '' : rule[7]);\n  } else if (base.indexOf(\"%z\") >= 0) {\n    const hours = -1 * Math.trunc(zone[0] / 60);\n    const hoursPart = padNumber(hours, 2);\n    const signPart = hours > 0 ? '+' : '';\n    const minutes = Math.abs(Math.trunc(zone[0] % 60));\n    const minutesPart = minutes === 0 ? '' : padNumber(minutes, 2);\n    return base.replace(\"%z\", `${signPart}${hoursPart}${minutesPart}`);\n  }\n  return base;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}