{"ast":null,"code":"import { defined } from '../util';\nfunction geometryAccessor(name) {\n  const fieldName = \"_\" + name;\n  return function (value) {\n    if (defined(value)) {\n      this._observerField(fieldName, value);\n      this.geometryChange();\n      return this;\n    }\n    return this[fieldName];\n  };\n}\nfunction defineGeometryAccessors(fn, names) {\n  for (let i = 0; i < names.length; i++) {\n    fn[names[i]] = geometryAccessor(names[i]);\n  }\n}\nconst withGeometry = (TBase, names = [\"geometry\"]) => {\n  const result = class extends TBase {};\n  defineGeometryAccessors(result.prototype, names);\n  return result;\n};\nexport default withGeometry;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}