{"ast":null,"code":"import * as easingFunctions from './easing-functions';\nimport { limitValue, now } from '../util';\nimport { animationFrame, Class } from '../common';\nimport AnimationFactory from './animation-factory';\nclass Animation extends Class {\n  static create(type, element, options) {\n    return AnimationFactory.current.create(type, element, options);\n  }\n  get options() {\n    return this._options || {\n      duration: 500,\n      easing: \"swing\"\n    };\n  }\n  set options(value) {\n    this._options = value;\n  }\n  constructor(element, options) {\n    super();\n    this.options = Object.assign({}, this.options, options);\n    this.element = element;\n  }\n  setup() {}\n  step() {}\n  play() {\n    const options = this.options;\n    const {\n      duration,\n      delay = 0\n    } = options;\n    const easing = easingFunctions[options.easing];\n    const start = now() + delay;\n    const finish = start + duration;\n    if (duration === 0) {\n      this.step(1);\n      this.abort();\n    } else {\n      setTimeout(() => {\n        const loop = () => {\n          if (this._stopped) {\n            return;\n          }\n          const wallTime = now();\n          const time = limitValue(wallTime - start, 0, duration);\n          const position = time / duration;\n          const easingPosition = easing(position, time, 0, 1, duration);\n          this.step(easingPosition);\n          if (wallTime < finish) {\n            animationFrame(loop);\n          } else {\n            this.abort();\n          }\n        };\n        loop();\n      }, delay);\n    }\n  }\n  abort() {\n    this._stopped = true;\n  }\n  destroy() {\n    this.abort();\n  }\n}\nexport default Animation;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}