{"ast":null,"code":"import errorDetails from './error-details';\nconst formatRegExp = /\\{(\\d+)}?\\}/g;\nclass IntlError {\n  constructor({\n    name,\n    message\n  }) {\n    if (!name || !message) {\n      throw new Error(\"{ name: string, message: string } object is required!\");\n    }\n    this.name = name;\n    this.message = message;\n  }\n  formatMessage(...values) {\n    const flattenValues = flatten(values);\n    const formattedMessage = this.message.replace(formatRegExp, function (match, index) {\n      return flattenValues[parseInt(index, 10)];\n    });\n    return `${this.name}: ${formattedMessage}`;\n  }\n  error(...values) {\n    return new Error(this.formatMessage(values));\n  }\n}\nconst flatten = function (arr) {\n  return arr.reduce((a, b) => a.concat(b), []);\n};\nconst toIntlErrors = function (errors) {\n  const predicate = function (prev, name) {\n    prev[name] = new IntlError({\n      name,\n      message: errors[name]\n    });\n    return prev;\n  };\n  return Object.keys(errors).reduce(predicate, {});\n};\nconst errors = toIntlErrors(errorDetails);\nexport { errors, IntlError, toIntlErrors };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}