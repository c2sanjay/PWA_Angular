{"ast":null,"code":"import { Class } from '../common';\nclass HasObservers extends Class {\n  observers() {\n    this._observers = this._observers || [];\n    return this._observers;\n  }\n  addObserver(element) {\n    if (!this._observers) {\n      this._observers = [element];\n    } else {\n      this._observers.push(element);\n    }\n    return this;\n  }\n  removeObserver(element) {\n    const observers = this.observers();\n    const index = observers.indexOf(element);\n    if (index !== -1) {\n      observers.splice(index, 1);\n    }\n    return this;\n  }\n  trigger(methodName, event) {\n    const observers = this._observers;\n    if (observers && !this._suspended) {\n      for (let idx = 0; idx < observers.length; idx++) {\n        let observer = observers[idx];\n        if (observer[methodName]) {\n          observer[methodName](event);\n        }\n      }\n    }\n    return this;\n  }\n  optionsChange(e = {}) {\n    e.element = this;\n    this.trigger(\"optionsChange\", e);\n  }\n  geometryChange() {\n    this.trigger(\"geometryChange\", {\n      element: this\n    });\n  }\n  suspend() {\n    this._suspended = (this._suspended || 0) + 1;\n    return this;\n  }\n  resume() {\n    this._suspended = Math.max((this._suspended || 0) - 1, 0);\n    return this;\n  }\n  _observerField(field, value) {\n    if (this[field]) {\n      this[field].removeObserver(this);\n    }\n    this[field] = value;\n    value.addObserver(this);\n  }\n}\nexport default HasObservers;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}