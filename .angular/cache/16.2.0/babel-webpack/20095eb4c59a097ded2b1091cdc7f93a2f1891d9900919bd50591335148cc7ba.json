{"ast":null,"code":"import _defineProperty from \"C:/Users/Mobile programming/Documents/angular-pwa-boilerplate/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n/**-----------------------------------------------------------------------------------------\n* Copyright © 2025 Progress Software Corporation. All rights reserved.\n* Licensed under commercial license. See LICENSE.md in the project root for more information\n*-------------------------------------------------------------------------------------------*/\nimport * as i0 from '@angular/core';\nimport { Directive, HostBinding, Input, Component, isDevMode, ChangeDetectionStrategy, Injectable, InjectionToken, Optional, Inject, NgModule } from '@angular/core';\nimport { isDocumentAvailable, areObjectsEqual } from '@progress/kendo-angular-common';\nimport { validatePackage } from '@progress/kendo-licensing';\nimport * as i1 from '@angular/platform-browser';\nimport { NgIf, NgClass } from '@angular/common';\nimport { Subject, BehaviorSubject, Subscription } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\n/**\n * @hidden\n */\nfunction _class3__svg_svg_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelement(0, \"svg\", 1);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"pointer-events\", \"none\");\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.content, i0.ɵɵsanitizeHtml);\n    i0.ɵɵattribute(\"viewBox\", ctx_r0.icon.viewBox);\n  }\n}\nfunction _class6_kendo_svgicon_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"kendo-svgicon\", 2);\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.innerCssClass)(\"icon\", ctx_r0.svgIcon)(\"size\", ctx_r0.size || (ctx_r0.iconSettings == null ? null : ctx_r0.iconSettings.size))(\"themeColor\", ctx_r0.iconSettings == null ? null : ctx_r0.iconSettings.themeColor)(\"flip\", ctx_r0.iconSettings == null ? null : ctx_r0.iconSettings.flip);\n  }\n}\nfunction _class6_ng_template_1_kendo_icon_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"kendo-icon\", 5);\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r3.innerCssClass)(\"name\", ctx_r3.name)(\"size\", ctx_r3.size || (ctx_r3.iconSettings == null ? null : ctx_r3.iconSettings.size))(\"themeColor\", ctx_r3.iconSettings == null ? null : ctx_r3.iconSettings.themeColor)(\"flip\", ctx_r3.iconSettings == null ? null : ctx_r3.iconSettings.flip);\n  }\n}\nfunction _class6_ng_template_1_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 6);\n  }\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"ngClass\", ctx_r5.customClasses);\n  }\n}\nfunction _class6_ng_template_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtemplate(0, _class6_ng_template_1_kendo_icon_0_Template, 1, 5, \"kendo-icon\", 3);\n    i0.ɵɵtemplate(1, _class6_ng_template_1_ng_template_1_Template, 1, 1, \"ng-template\", null, 4, i0.ɵɵtemplateRefExtractor);\n  }\n  if (rf & 2) {\n    const _r4 = i0.ɵɵreference(2);\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngIf\", !ctx_r2.customFontIconClass)(\"ngIfElse\", _r4);\n  }\n}\nconst packageMetadata = {\n  name: '@progress/kendo-angular-icons',\n  productName: 'Kendo UI for Angular',\n  productCode: 'KENDOUIANGULAR',\n  productCodes: ['KENDOUIANGULAR'],\n  publishDate: 1741163464,\n  version: '18.1.1',\n  licensingDocsUrl: 'https://www.telerik.com/kendo-angular-ui/my-license/'\n};\nconst sizeClasses = {\n  'default': 'k-icon',\n  'xsmall': 'k-icon-xs',\n  'small': 'k-icon-sm',\n  'medium': 'k-icon-md',\n  'large': 'k-icon-lg',\n  'xlarge': 'k-icon-xl',\n  'xxlarge': 'k-icon-xxl',\n  'xxxlarge': 'k-icon-xxxl'\n};\n/**\n * @hidden\n */\nlet IconBaseDirective = /*#__PURE__*/(() => {\n  var _class;\n  class IconBaseDirective {\n    get horizontalFlip() {\n      return this.flip === 'horizontal' || this.flip === 'both';\n    }\n    get verticalFlip() {\n      return this.flip === 'vertical' || this.flip === 'both';\n    }\n    /**\n     * Flips the icon horizontally, vertically or in both directions.\n     */\n\n    /**\n     * Specifies the theme color for the Icon.\n     *\n     * The possible values are:\n     * * `inherit` (Default)&mdash;Applies coloring based on the current color.\n     * * `primary` &mdash;Applies coloring based on primary theme color.\n     * * `secondary`&mdash;Applies coloring based on secondary theme color.\n     * * `tertiary`&mdash; Applies coloring based on tertiary theme color.\n     * * `info`&mdash;Applies coloring based on info theme color.\n     * * `success`&mdash; Applies coloring based on success theme color.\n     * * `warning`&mdash; Applies coloring based on warning theme color.\n     * * `error`&mdash; Applies coloring based on error theme color.\n     * * `dark`&mdash; Applies coloring based on dark theme color.\n     * * `light`&mdash; Applies coloring based on light theme color.\n     * * `inverse`&mdash; Applies coloring based on inverse theme color.\n     *\n     */\n    set themeColor(themeColor) {\n      const element = this.element.nativeElement;\n      if (this._themeColor) {\n        this.renderer.removeClass(element, `!k-color-${this._themeColor}`);\n      }\n      this._themeColor = themeColor;\n      // needed to ensure the theme color will be always applied; e.g. the class .k-button-icon, specific\n      // for icon buttons applies \"color: inherit\" which overwrites the theme color\n      if (themeColor) {\n        this.renderer.addClass(element, `!k-color-${themeColor}`);\n      }\n    }\n    get themeColor() {\n      return this._themeColor;\n    }\n    /**\n     * Specifies the size of the Icon.\n     *\n     * The possible values are:\n     * * `default` (Default) (Font-size: 16px; Width: 16px; Height: 16px)\n     * * `xsmall` (Font-size: 12px; Width: 12px; Height: 12px;)\n     * * `small` (Font-size: 14px; Width: 14px; Height: 14px;)\n     * * `medium` (Font-size: 16px; Width: 16px; Height: 16px;)\n     * * `large` (Font-size: 20px; Width: 20px; Height: 20px;)\n     * * `xlarge` (Font-size: 24px; Width: 24px; Height: 24px;)\n     * * `xxlarge` (Font-size: 32px; Width: 32px; Height: 32px;)\n     * * `xxxlarge` (Font-size: 48px; Width: 48px; Height: 48px;)\n     *\n     */\n    set size(size) {\n      const currentClass = sizeClasses[this.size];\n      const newClass = sizeClasses[size];\n      const element = this.element.nativeElement;\n      this.renderer.removeClass(element, currentClass);\n      if (size && size !== 'default') {\n        this.renderer.addClass(element, newClass);\n      }\n      this._size = size;\n    }\n    get size() {\n      return this._size;\n    }\n    constructor(element, renderer) {\n      _defineProperty(this, \"element\", void 0);\n      _defineProperty(this, \"renderer\", void 0);\n      _defineProperty(this, \"flip\", void 0);\n      _defineProperty(this, \"_themeColor\", void 0);\n      _defineProperty(this, \"_size\", void 0);\n      this.element = element;\n      this.renderer = renderer;\n      validatePackage(packageMetadata);\n    }\n  }\n  _class = IconBaseDirective;\n  _defineProperty(IconBaseDirective, \"\\u0275fac\", function _class_Factory(t) {\n    return new (t || _class)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  });\n  _defineProperty(IconBaseDirective, \"\\u0275dir\", /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: _class,\n    selectors: [[\"\", \"kendoIconBase\", \"\"]],\n    hostVars: 4,\n    hostBindings: function _class_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"k-flip-h\", ctx.horizontalFlip)(\"k-flip-v\", ctx.verticalFlip);\n      }\n    },\n    inputs: {\n      flip: \"flip\",\n      themeColor: \"themeColor\",\n      size: \"size\"\n    }\n  }));\n  return IconBaseDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Represents the Kendo UI Icon component for Angular.\n */\nlet IconComponent = /*#__PURE__*/(() => {\n  var _class2;\n  class IconComponent extends IconBaseDirective {\n    /**\n     * Defines the name for an existing icon in a Kendo UI theme, which will be rendered.\n     * All [Kendo UI Icons](slug:icon_list) are supported.\n     */\n    set name(name) {\n      if (isDocumentAvailable()) {\n        const newName = name !== this._name;\n        if (newName) {\n          const element = this.element.nativeElement;\n          this.renderer.removeClass(element, `k-i-${this.name}`);\n          this.renderer.addClass(element, `k-i-${name}`);\n        }\n      }\n      this._name = name;\n    }\n    get name() {\n      return this._name;\n    }\n    constructor(element, renderer) {\n      super(element, renderer);\n      _defineProperty(this, \"element\", void 0);\n      _defineProperty(this, \"renderer\", void 0);\n      _defineProperty(this, \"hostClass\", true);\n      _defineProperty(this, \"hostAriaHidden\", true);\n      _defineProperty(this, \"_name\", void 0);\n      this.element = element;\n      this.renderer = renderer;\n    }\n  }\n  _class2 = IconComponent;\n  _defineProperty(IconComponent, \"\\u0275fac\", function _class2_Factory(t) {\n    return new (t || _class2)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  });\n  _defineProperty(IconComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class2,\n    selectors: [[\"kendo-icon\"]],\n    hostVars: 5,\n    hostBindings: function _class2_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-hidden\", ctx.hostAriaHidden);\n        i0.ɵɵclassProp(\"k-icon\", ctx.hostClass)(\"k-font-icon\", ctx.hostClass);\n      }\n    },\n    inputs: {\n      name: \"name\"\n    },\n    exportAs: [\"kendoIcon\"],\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 0,\n    vars: 0,\n    template: function _class2_Template(rf, ctx) {},\n    encapsulation: 2\n  }));\n  return IconComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst areSame = (i1, i2) => i1?.name === i2?.name && i1.content === i2.content && i1.viewBox === i2.viewBox;\n/**\n * Represents the Kendo UI SVG Icon component for Angular.\n */\nlet SVGIconComponent = /*#__PURE__*/(() => {\n  var _class3;\n  class SVGIconComponent extends IconBaseDirective {\n    /**\n     * Defines the SVG icon, which will be rendered. All [Kendo UI SVG Icons](slug:svgicon_list) are supported.\n     */\n    set icon(icon) {\n      const element = this.element.nativeElement;\n      const hasDocument = isDocumentAvailable();\n      const newName = icon?.name && icon.name !== this._icon?.name;\n      if (this._icon && this._icon.name && newName && hasDocument) {\n        this.renderer.removeClass(element, `k-svg-i-${this._icon.name}`);\n      }\n      if (!areSame(icon, this._icon)) {\n        this._icon = icon;\n      }\n      if (hasDocument && newName) {\n        this.renderer.addClass(element, `k-svg-i-${this._icon.name}`);\n      }\n    }\n    get icon() {\n      return this._icon;\n    }\n    get content() {\n      return this.domSanitizer.bypassSecurityTrustHtml(this.icon.content);\n    }\n    get visible() {\n      return this.icon && isDocumentAvailable();\n    }\n    constructor(domSanitizer, element, renderer) {\n      super(element, renderer);\n      _defineProperty(this, \"domSanitizer\", void 0);\n      _defineProperty(this, \"element\", void 0);\n      _defineProperty(this, \"renderer\", void 0);\n      _defineProperty(this, \"hostClass\", true);\n      _defineProperty(this, \"hostAriaHidden\", true);\n      _defineProperty(this, \"_icon\", void 0);\n      this.domSanitizer = domSanitizer;\n      this.element = element;\n      this.renderer = renderer;\n    }\n    ngOnInit() {\n      this.verifyIconProperty();\n    }\n    verifyIconProperty() {\n      if (!isDevMode()) {\n        return;\n      }\n      if (!this._icon) {\n        throw new Error(`\n                Invalid configuration.\n                The input [icon] is required for the Kendo UI SVG Icon component for Angular.\n                See https://www.telerik.com/kendo-angular-ui/components/icons/svg-icon\n            `);\n      }\n    }\n  }\n  _class3 = SVGIconComponent;\n  _defineProperty(SVGIconComponent, \"\\u0275fac\", function _class3_Factory(t) {\n    return new (t || _class3)(i0.ɵɵdirectiveInject(i1.DomSanitizer), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2));\n  });\n  _defineProperty(SVGIconComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class3,\n    selectors: [[\"kendo-svg-icon\"], [\"kendo-svgicon\"]],\n    hostVars: 5,\n    hostBindings: function _class3_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵattribute(\"aria-hidden\", ctx.hostAriaHidden);\n        i0.ɵɵclassProp(\"k-svg-icon\", ctx.hostClass)(\"k-icon\", ctx.hostClass);\n      }\n    },\n    inputs: {\n      icon: \"icon\"\n    },\n    exportAs: [\"kendoSVGIcon\"],\n    standalone: true,\n    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n    decls: 1,\n    vars: 1,\n    consts: [[\"xmlns\", \"http://www.w3.org/2000/svg\", 0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\", 3, \"pointerEvents\", \"innerHTML\", 4, \"ngIf\"], [\"xmlns\", \"http://www.w3.org/2000/svg\", 0, \"xmlns\", \"xlink\", \"http://www.w3.org/1999/xlink\", 3, \"innerHTML\"]],\n    template: function _class3_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, _class3__svg_svg_0_Template, 1, 4, \"svg\", 0);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngIf\", ctx.visible);\n      }\n    },\n    dependencies: [NgIf],\n    encapsulation: 2,\n    changeDetection: 0\n  }));\n  return SVGIconComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @hidden\n */\nconst isPresent = value => value !== null && value !== undefined;\n\n/**\n * A service that returns the current icon settings to be used in subscribers.\n * Use the public `notify` method to change the icon settings dynamically.\n */\nlet IconSettingsService = /*#__PURE__*/(() => {\n  var _class4;\n  class IconSettingsService {\n    constructor() {\n      /**\n       * @hidden\n       */\n      _defineProperty(this, \"changes\", new Subject());\n    }\n    /**\n     * Notifies subscribers that the icon settings were changed.\n     *\n     * @param iconSettings - (Optional) A new value for the [icon settings token]({% slug api_icons_icon_settings %}).\n     */\n    notify(iconSettings) {\n      this.changes.next(iconSettings);\n    }\n    /**\n     * Returns the [`SVGIcon`](slug:api_icons_svgicon) object for the provided key.\n     * Override in a custom service to provide custom SVG icons.\n     *\n     * @hidden\n     */\n    getSvgIcon(_name) {\n      return null;\n    }\n    /**\n     * Returns the list of classes to be rendered on the host `SPAN` element of custom font icons.\n     * Override in a custom service to provide classes for custom font icons.\n     *\n     * @hidden\n     */\n    getCustomFontIconClass(_key) {\n      return null;\n    }\n  }\n  _class4 = IconSettingsService;\n  _defineProperty(IconSettingsService, \"\\u0275fac\", function _class4_Factory(t) {\n    return new (t || _class4)();\n  });\n  _defineProperty(IconSettingsService, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _class4,\n    factory: _class4.ɵfac\n  }));\n  return IconSettingsService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * A token that specifies the [IconSettings](slug:api_icons_iconsettings) of the Kendo UI for Angular components ([see example](slug:icon_settings#toc-icons-configuration)).\n *\n * ```ts\n * import { NgModule } from '@angular/core';\n *\n * @NgModule({\n * ...\n * providers: [{ provide: ICON_SETTINGS, useValue: { type: 'svg', size: 'xsmall' }}]\n * })\n * export class AppModule {}\n * ```\n *\n */\nconst ICON_SETTINGS = new InjectionToken('Kendo UI Icon-Settings token');\nconst DEFAULT_ICON_SETTINGS = {\n  type: 'svg'\n};\n/**\n * The service responsible for handling changes in the icons settings. Should be included in the providers array when implementing the functionality in a standalone component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the IconsService\n * import { IconsService } from '@progress/kendo-angular-icons';\n *\n * // Define a standalone component\n * @Component({\n *  selector: my-component,\n *  standalone: true,\n *  imports: [ ... ],\n *  providers: [IconsService, { provide: ICON_SETTINGS , useValue: { type: 'font' } }],\n *  template: ...\n * })\n * export class AppComponent {}\n * ```\n */\nlet IconsService = /*#__PURE__*/(() => {\n  var _class5;\n  class IconsService {\n    constructor(_iconSettings, iconSettingsService) {\n      _defineProperty(this, \"_iconSettings\", void 0);\n      _defineProperty(this, \"iconSettingsService\", void 0);\n      /**\n       * Notifies subscribers of the initial icon settings, and upon each call to `notify`.\n       * @hidden\n       */\n      _defineProperty(this, \"changes\", new BehaviorSubject(this.iconSettings || DEFAULT_ICON_SETTINGS));\n      _defineProperty(this, \"subs\", new Subscription());\n      this._iconSettings = _iconSettings;\n      this.iconSettingsService = iconSettingsService;\n      if (iconSettingsService) {\n        this.subs.add(iconSettingsService.changes.pipe(map(iconSettings => isPresent(iconSettings) ? iconSettings : this._iconSettings), tap(iconSettings => this._iconSettings = iconSettings)).subscribe(iconSettings => this.changes.next(iconSettings)));\n      }\n      if (isPresent(this.iconSettings) && !areObjectsEqual(this.iconSettings, DEFAULT_ICON_SETTINGS)) {\n        this.changes.next(this.iconSettings);\n      }\n    }\n    /**\n     * @hidden\n     */\n    get iconSettings() {\n      return this._iconSettings;\n    }\n    ngOnDestroy() {\n      this.subs.unsubscribe();\n    }\n    /**\n     * Returns the [`SVGIcon`](slug:api_icons_svgicon) object for the provided key.\n     * Override in a custom service to provide custom SVG icons.\n     * @hidden\n     */\n    getSvgIcon(name) {\n      const customIcon = this.iconSettingsService && this.iconSettingsService.getSvgIcon(name);\n      return customIcon;\n    }\n    /**\n     * Returns the list of classes to be rendered on the host `SPAN` element of custom font icons.\n     * Override in a custom service to provide classes for custom font icons.\n     * @hidden\n     */\n    getCustomFontIconClass(key) {\n      const customClass = this.iconSettingsService && this.iconSettingsService.getCustomFontIconClass(key);\n      return customClass;\n    }\n  }\n  _class5 = IconsService;\n  _defineProperty(IconsService, \"\\u0275fac\", function _class5_Factory(t) {\n    return new (t || _class5)(i0.ɵɵinject(ICON_SETTINGS, 8), i0.ɵɵinject(IconSettingsService, 8));\n  });\n  _defineProperty(IconsService, \"\\u0275prov\", /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: _class5,\n    factory: _class5.ɵfac,\n    providedIn: 'root'\n  }));\n  return IconsService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * @hidden\n */\nlet IconWrapperComponent = /*#__PURE__*/(() => {\n  var _class6;\n  class IconWrapperComponent {\n    get customClasses() {\n      const classes = [this.customFontClass, this.innerCssClass, this.customFontIconClass].filter(cl => !!cl).join(' ');\n      return classes;\n    }\n    get hasSvgIcon() {\n      this.svgIcon = this.iconsService.getSvgIcon(this.name) || this.svgIcon;\n      if (this.svgIcon) {\n        return true;\n      }\n      if (isDevMode()) {\n        console.groupCollapsed(`Kendo UI for Angular: Icon type is set to 'svg', but only font icon name is provided. The \"${this.name}\" font icon will be rendered instead.`);\n        console.warn(`\nStarting from v7.0.0 (October, 2023) of the Kendo Themes, the font icons will be removed from the theme.\n* To render an SVG icon, update the component configuration by setting the \"svgIcon\" input to the respective icon definition.\n* To continue to use font icons, install the \"@progress/kendo-font-icons\" package and import \"@progress/kendo-font-icons/dist/index.css\".\n\nPlease note, that font icons are not compatible with a strict Content Security Policy and require the use of the \"unsafe-inline\" override.\n\nFor further details, check the following documentation articles:\nhttps://www.telerik.com/kendo-angular-ui/components/icons/icon-settings\nhttps://www.telerik.com/kendo-angular-ui/components/styling/icons/\nhttps://www.telerik.com/kendo-angular-ui/components/styling/svg-icons/\nhttps://www.telerik.com/design-system/docs/foundation/iconography/font-icons/\nhttps://www.telerik.com/design-system/docs/foundation/iconography/icon-list/\n            `);\n        console.groupEnd();\n      }\n      return false;\n    }\n    get customFontIconClass() {\n      return this.iconsService.getCustomFontIconClass(this.name) || this.customFontClass;\n    }\n    constructor(iconsService) {\n      _defineProperty(this, \"iconsService\", void 0);\n      _defineProperty(this, \"hostClass\", true);\n      /**\n       * Defines the name for an existing font icon in a Kendo UI theme, which will be rendered.\n       * All [Kendo UI Icons](slug:icons#icons-list) are supported.\n       */\n      _defineProperty(this, \"name\", void 0);\n      /**\n       * Defines an [SVGIcon](slug:api_icons_svgicon) to be rendered.\n       */\n      _defineProperty(this, \"svgIcon\", void 0);\n      /**\n       * Provided by consuming components in case an additional k-specific class needs to be rendered\n       * on the internal Icon component.\n       */\n      _defineProperty(this, \"innerCssClass\", '');\n      /**\n       * Provided by consuming components in case a custom font icon class is set\n       * by the developer using the consuming component through its API.\n       */\n      _defineProperty(this, \"customFontClass\", '');\n      /**\n       * Specifies the size of the Icon.\n       *\n       * The possible values are:\n       * * `default` (Default) (Font-size: 16px; Width: 16px; Height: 16px)\n       * * `xsmall` (Font-size: 12px; Width: 12px; Height: 12px;)\n       * * `small` (Font-size: 14px; Width: 14px; Height: 14px;)\n       * * `medium` (Font-size: 16px; Width: 16px; Height: 16px;)\n       * * `large` (Font-size: 20px; Width: 20px; Height: 20px;)\n       * * `xlarge` (Font-size: 24px; Width: 24px; Height: 24px;)\n       * * `xxlarge` (Font-size: 32px; Width: 32px; Height: 32px;)\n       * * `xxxlarge` (Font-size: 48px; Width: 48px; Height: 48px;)\n       *\n       */\n      _defineProperty(this, \"size\", void 0);\n      _defineProperty(this, \"iconSettings\", void 0);\n      _defineProperty(this, \"subs\", new Subscription());\n      this.iconsService = iconsService;\n      this.subs = iconsService.changes.subscribe(iconSettings => {\n        this.iconSettings = iconSettings;\n      });\n    }\n    ngOnDestroy() {\n      this.subs.unsubscribe();\n    }\n  }\n  _class6 = IconWrapperComponent;\n  _defineProperty(IconWrapperComponent, \"\\u0275fac\", function _class6_Factory(t) {\n    return new (t || _class6)(i0.ɵɵdirectiveInject(IconsService));\n  });\n  _defineProperty(IconWrapperComponent, \"\\u0275cmp\", /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: _class6,\n    selectors: [[\"kendo-icon-wrapper\"]],\n    hostVars: 2,\n    hostBindings: function _class6_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        i0.ɵɵclassProp(\"k-icon-wrapper-host\", ctx.hostClass);\n      }\n    },\n    inputs: {\n      name: \"name\",\n      svgIcon: \"svgIcon\",\n      innerCssClass: \"innerCssClass\",\n      customFontClass: \"customFontClass\",\n      size: \"size\"\n    },\n    exportAs: [\"kendoIconWrapper\"],\n    standalone: true,\n    features: [i0.ɵɵStandaloneFeature],\n    decls: 3,\n    vars: 2,\n    consts: [[3, \"ngClass\", \"icon\", \"size\", \"themeColor\", \"flip\", 4, \"ngIf\", \"ngIfElse\"], [\"font\", \"\"], [3, \"ngClass\", \"icon\", \"size\", \"themeColor\", \"flip\"], [3, \"ngClass\", \"name\", \"size\", \"themeColor\", \"flip\", 4, \"ngIf\", \"ngIfElse\"], [\"custom\", \"\"], [3, \"ngClass\", \"name\", \"size\", \"themeColor\", \"flip\"], [3, \"ngClass\"]],\n    template: function _class6_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵtemplate(0, _class6_kendo_svgicon_0_Template, 1, 5, \"kendo-svgicon\", 0);\n        i0.ɵɵtemplate(1, _class6_ng_template_1_Template, 3, 2, \"ng-template\", null, 1, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(2);\n        i0.ɵɵproperty(\"ngIf\", (ctx.iconSettings == null ? null : ctx.iconSettings.type) === \"svg\" && ctx.hasSvgIcon)(\"ngIfElse\", _r1);\n      }\n    },\n    dependencies: [NgClass, NgIf, IconComponent, SVGIconComponent],\n    encapsulation: 2\n  }));\n  return IconWrapperComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n//IMPORTANT: NgModule export kept for backwards compatibility\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi'])\n * definition for the Icon component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Icon module\n * import { IconModule } from '@progress/kendo-angular-icons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, IconModule], // import Icon module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nlet IconModule = /*#__PURE__*/(() => {\n  var _class7;\n  class IconModule {}\n  _class7 = IconModule;\n  _defineProperty(IconModule, \"\\u0275fac\", function _class7_Factory(t) {\n    return new (t || _class7)();\n  });\n  _defineProperty(IconModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _class7\n  }));\n  _defineProperty(IconModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n  return IconModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n//IMPORTANT: NgModule export kept for backwards compatibility\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi'])\n * definition for the SVG Icon component.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the SVG Icon module\n * import { SVGIconModule } from '@progress/kendo-angular-icons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, SVGIconModule], // import SVG Icon module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nlet SVGIconModule = /*#__PURE__*/(() => {\n  var _class8;\n  class SVGIconModule {}\n  _class8 = SVGIconModule;\n  _defineProperty(SVGIconModule, \"\\u0275fac\", function _class8_Factory(t) {\n    return new (t || _class8)();\n  });\n  _defineProperty(SVGIconModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _class8\n  }));\n  _defineProperty(SVGIconModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({}));\n  return SVGIconModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Utility array that contains all `KendoIcon` related components and directives\n */\nconst KENDO_ICON = [IconComponent];\n/**\n * Utility array that contains all `KendoSVGIcon` related components and directives\n */\nconst KENDO_SVGICON = [SVGIconComponent];\n/**\n * Utility array that contains all `@progress/kendo-angular-icons` related components and directives\n */\nconst KENDO_ICONS = [...KENDO_ICON, ...KENDO_SVGICON];\n\n//IMPORTANT: NgModule export kept for backwards compatibility\n/**\n * Represents the [NgModule](link:site.data.urls.angular['ngmoduleapi'])\n * definition for the Icons components.\n *\n * @example\n *\n * ```ts-no-run\n * // Import the Icons module\n * import { IconsModule } from '@progress/kendo-angular-icons';\n *\n * // The browser platform with a compiler\n * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n *\n * import { NgModule } from '@angular/core';\n *\n * // Import the app component\n * import { AppComponent } from './app.component';\n *\n * // Define the app module\n * _@NgModule({\n *     declarations: [AppComponent], // declare app component\n *     imports:      [BrowserModule, IconsModule], // import Icons module\n *     bootstrap:    [AppComponent]\n * })\n * export class AppModule {}\n *\n * // Compile and launch the module\n * platformBrowserDynamic().bootstrapModule(AppModule);\n *\n * ```\n */\nlet IconsModule = /*#__PURE__*/(() => {\n  var _class9;\n  class IconsModule {}\n  _class9 = IconsModule;\n  _defineProperty(IconsModule, \"\\u0275fac\", function _class9_Factory(t) {\n    return new (t || _class9)();\n  });\n  _defineProperty(IconsModule, \"\\u0275mod\", /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: _class9\n  }));\n  _defineProperty(IconsModule, \"\\u0275inj\", /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [IconsService]\n  }));\n  return IconsModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ICON_SETTINGS, IconComponent, IconModule, IconSettingsService, IconWrapperComponent, IconsModule, IconsService, KENDO_ICON, KENDO_ICONS, KENDO_SVGICON, SVGIconComponent, SVGIconModule };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}