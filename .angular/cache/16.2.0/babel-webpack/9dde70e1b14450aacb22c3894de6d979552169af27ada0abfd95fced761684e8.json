{"ast":null,"code":"import HasObservers from '../core/has-observers';\nimport toMatrix from './to-matrix';\nimport Matrix from './matrix';\nimport Point from './point';\nclass Transformation extends HasObservers {\n  constructor(matrix = Matrix.unit()) {\n    super();\n    this._matrix = matrix;\n  }\n  clone() {\n    return new Transformation(this._matrix.clone());\n  }\n  equals(other) {\n    return other && other._matrix.equals(this._matrix);\n  }\n  translate(x, y) {\n    this._matrix = this._matrix.multiplyCopy(Matrix.translate(x, y));\n    this._optionsChange();\n    return this;\n  }\n  scale(scaleX, scaleY = scaleX, origin = null) {\n    let originPoint = origin;\n    if (originPoint) {\n      originPoint = Point.create(originPoint);\n      this._matrix = this._matrix.multiplyCopy(Matrix.translate(originPoint.x, originPoint.y));\n    }\n    this._matrix = this._matrix.multiplyCopy(Matrix.scale(scaleX, scaleY));\n    if (originPoint) {\n      this._matrix = this._matrix.multiplyCopy(Matrix.translate(-originPoint.x, -originPoint.y));\n    }\n    this._optionsChange();\n    return this;\n  }\n  rotate(angle, origin) {\n    const originPoint = Point.create(origin) || Point.ZERO;\n    this._matrix = this._matrix.multiplyCopy(Matrix.rotate(angle, originPoint.x, originPoint.y));\n    this._optionsChange();\n    return this;\n  }\n  multiply(transformation) {\n    const matrix = toMatrix(transformation);\n    this._matrix = this._matrix.multiplyCopy(matrix);\n    this._optionsChange();\n    return this;\n  }\n  matrix(value) {\n    if (value) {\n      this._matrix = value;\n      this._optionsChange();\n      return this;\n    }\n    return this._matrix;\n  }\n  _optionsChange() {\n    this.optionsChange({\n      field: \"transform\",\n      value: this\n    });\n  }\n}\nexport default Transformation;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}