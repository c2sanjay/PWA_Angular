{"ast":null,"code":"import { isPresent, isBlank } from '../utils';\nimport { getter } from '../accessor';\nconst compare = (a, b) => {\n  if (isBlank(a)) {\n    return a === b ? 0 : -1;\n  }\n  if (isBlank(b)) {\n    return 1;\n  }\n  if (a.localeCompare) {\n    return a.localeCompare(b);\n  }\n  return a > b ? 1 : a < b ? -1 : 0;\n};\nconst compareDesc = (a, b) => compare(b, a);\nconst descriptorAsFunc = descriptor => {\n  if (typeof descriptor.compare === 'function') {\n    return descriptor.compare;\n  }\n  const prop = getter(descriptor.field, true);\n  return (a, b) => (descriptor.dir === 'asc' ? compare : compareDesc)(prop(a), prop(b));\n};\nconst initial = (_a, _b) => 0;\n// tslint:disable:max-line-length\n/**\n * Converts the `SortDescriptors` into a [Comparer]({% slug api_kendo-data-query_comparer %}) function that can be used through `Array.sort`. If multiple descriptors are provided, sorting is applied in a right-to-left order.\n * @param {SortDescriptor[]} descriptors - The descriptors which will be converted.\n * @returns {Comparer} - The produced function.\n *\n * @example\n * ```ts\n * import { composeSortDescriptors } from '@progress/kendo-data-query';\n *\n * const data = [{ name: \"Pork\" }, { name: \"Pepper\" }, { name: \"Beef\" } ];\n * const comparer = composeSortDescriptors([{ field: \"name\", dir: \"asc\" }]);\n * const result = data.sort(comparer);\n * // output: [{ name: \"Beef\" }, { name: \"Pepper\" }, { name: \"Pork\" }];\n * ```\n */\n// tslint:enable:max-line-length\nexport const composeSortDescriptors = descriptors => descriptors.filter(x => isPresent(x.dir) || isPresent(x.compare)).map(descriptor => descriptorAsFunc(descriptor)).reduce((acc, curr) => (a, b) => acc(a, b) || curr(a, b), initial);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}