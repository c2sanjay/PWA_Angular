{"ast":null,"code":"import Class from './class';\nclass Observable extends Class {\n  constructor() {\n    super();\n    this._events = {};\n  }\n  bind(eventName, handlers, one) {\n    const eventNames = getArray(eventName);\n    const handlersIsFunction = isFunction(handlers);\n    const length = eventNames.length;\n    if (handlers === undefined) {\n      for (let field in eventName) {\n        this.bind(field, eventName[field]);\n      }\n      return this;\n    }\n    for (let idx = 0; idx < length; idx++) {\n      const eventName = eventNames[idx];\n      let handler = handlersIsFunction ? handlers : handlers[eventName];\n      if (handler) {\n        if (one) {\n          const original = handler;\n          handler = () => {\n            // eslint-disable-line no-loop-func\n            this.unbind(eventName, handler);\n            original.apply(this, arguments);\n          };\n          handler.original = original;\n        }\n        let events = this._events[eventName] = this._events[eventName] || [];\n        events.push(handler);\n      }\n    }\n    return this;\n  }\n  one(eventNames, handlers) {\n    return this.bind(eventNames, handlers, true);\n  }\n  first(eventName, handlers) {\n    const eventNames = getArray(eventName);\n    const handlersIsFunction = isFunction(handlers);\n    for (let idx = 0, length = eventNames.length; idx < length; idx++) {\n      const eventName = eventNames[idx];\n      const handler = handlersIsFunction ? handlers : handlers[eventName];\n      if (handler) {\n        const events = this._events[eventName] = this._events[eventName] || [];\n        events.unshift(handler);\n      }\n    }\n    return this;\n  }\n  trigger(eventName, e = {}) {\n    let events = this._events[eventName];\n    if (events) {\n      const length = events.length;\n      e.sender = this;\n      e._defaultPrevented = false;\n      e.preventDefault = preventDefault;\n      e.isDefaultPrevented = isDefaultPrevented;\n      events = events.slice();\n      for (let idx = 0; idx < length; idx++) {\n        events[idx].call(this, e);\n      }\n      return e._defaultPrevented === true;\n    }\n    return false;\n  }\n  unbind(eventName, handler) {\n    const events = this._events[eventName];\n    if (eventName === undefined) {\n      this._events = {};\n    } else if (events) {\n      if (handler) {\n        for (let idx = events.length - 1; idx >= 0; idx--) {\n          if (events[idx] === handler || events[idx].original === handler) {\n            events.splice(idx, 1);\n          }\n        }\n      } else {\n        this._events[eventName] = [];\n      }\n    }\n    return this;\n  }\n}\nfunction isFunction(value) {\n  return typeof value === \"function\";\n}\nfunction getArray(value) {\n  return typeof value === \"string\" ? [value] : value;\n}\nfunction preventDefault() {\n  this._defaultPrevented = true;\n}\nfunction isDefaultPrevented() {\n  return this._defaultPrevented === true;\n}\nexport default Observable;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}